// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TREK_Web_Diploma.Data;

#nullable disable

namespace TREK_Web_Diploma.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TREK_Web_Diploma.Models.factory.Factory", b =>
                {
                    b.Property<int>("FactoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FactoryId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("FactoryId");

                    b.ToTable("Factory", "factory");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.factory.JobTitle", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobTitleId"));

                    b.Property<string>("JobTitleName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("JobTitleId");

                    b.ToTable("JobTitle", "factory");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.factory.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("StaffId");

                    b.HasIndex("FactoryId");

                    b.HasIndex("JobTitleId");

                    b.ToTable("Staff", "factory");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.production.Bike", b =>
                {
                    b.Property<int>("BikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BikeId"));

                    b.Property<string>("BikeDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("BikeImage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BikeName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("BikePrice")
                        .HasMaxLength(8)
                        .HasColumnType("int");

                    b.Property<double>("BikeWeight")
                        .HasMaxLength(6)
                        .HasColumnType("float");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("FramesetId")
                        .HasColumnType("int");

                    b.Property<int>("GroopsetId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfBike")
                        .HasColumnType("int");

                    b.Property<int>("WheelsetId")
                        .HasColumnType("int");

                    b.HasKey("BikeId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("FramesetId");

                    b.HasIndex("GroopsetId");

                    b.HasIndex("WheelsetId");

                    b.ToTable("Bike", "production");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.production.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<int>("BrakeId")
                        .HasColumnType("int");

                    b.Property<int>("GripsId")
                        .HasColumnType("int");

                    b.Property<int>("HandlebarId")
                        .HasColumnType("int");

                    b.Property<int>("SaddleId")
                        .HasColumnType("int");

                    b.Property<int>("SeatPostId")
                        .HasColumnType("int");

                    b.Property<int>("SteeringId")
                        .HasColumnType("int");

                    b.Property<int>("StemId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId");

                    b.HasIndex("BrakeId");

                    b.HasIndex("GripsId");

                    b.HasIndex("HandlebarId");

                    b.HasIndex("SaddleId");

                    b.HasIndex("SeatPostId");

                    b.HasIndex("SteeringId");

                    b.HasIndex("StemId");

                    b.ToTable("Equipment", "production");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.production.Frameset", b =>
                {
                    b.Property<int>("FramesetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FramesetId"));

                    b.Property<int>("ForkId")
                        .HasColumnType("int");

                    b.Property<int>("FrameId")
                        .HasColumnType("int");

                    b.HasKey("FramesetId");

                    b.HasIndex("ForkId");

                    b.HasIndex("FrameId");

                    b.ToTable("Frameset", "production");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.production.Groopset", b =>
                {
                    b.Property<int>("GroopsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroopsetId"));

                    b.Property<int>("CarriageId")
                        .HasColumnType("int");

                    b.Property<int>("PedalsId")
                        .HasColumnType("int");

                    b.Property<int>("TransmitionId")
                        .HasColumnType("int");

                    b.HasKey("GroopsetId");

                    b.HasIndex("CarriageId");

                    b.HasIndex("PedalsId");

                    b.HasIndex("TransmitionId");

                    b.ToTable("GroopSet", "production");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.production.Wheelset", b =>
                {
                    b.Property<int>("WheelsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WheelsetId"));

                    b.Property<int>("HubId")
                        .HasColumnType("int");

                    b.Property<int>("RimId")
                        .HasColumnType("int");

                    b.Property<int>("TireId")
                        .HasColumnType("int");

                    b.HasKey("WheelsetId");

                    b.HasIndex("HubId");

                    b.HasIndex("RimId");

                    b.HasIndex("TireId");

                    b.ToTable("Wheelset", "production");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesEquipment.Brake", b =>
                {
                    b.Property<int>("BrakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrakeId"));

                    b.Property<string>("BrakeName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("BrakeQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("BrakeId");

                    b.ToTable("Brake", "sparesEquipment");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesEquipment.Grips", b =>
                {
                    b.Property<int>("GripsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GripsId"));

                    b.Property<string>("GripsName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("GripsQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("GripsId");

                    b.ToTable("Grips", "sparesEquipment");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesEquipment.Handlebar", b =>
                {
                    b.Property<int>("HandlbarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HandlbarId"));

                    b.Property<string>("HandlbarName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("HandlebarQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("HandlbarId");

                    b.ToTable("Handlebar", "sparesEquipment");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesEquipment.Saddle", b =>
                {
                    b.Property<int>("SaddleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaddleId"));

                    b.Property<string>("SaddleName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("SaddleQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("SaddleId");

                    b.ToTable("Saddle", "sparesEquipment");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesEquipment.SeatPost", b =>
                {
                    b.Property<int>("SeatPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatPostId"));

                    b.Property<string>("SeatPostName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("SeatPostQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("SeatPostId");

                    b.ToTable("SeatPost", "sparesEquipment");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesEquipment.Steering", b =>
                {
                    b.Property<int>("SteeringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SteeringId"));

                    b.Property<string>("SteeringName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("SteeringQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("SteeringId");

                    b.ToTable("Steering", "sparesEquipment");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesEquipment.Stem", b =>
                {
                    b.Property<int>("StemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StemId"));

                    b.Property<string>("StemName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("StemQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("StemId");

                    b.ToTable("Stem", "sparesEquipment");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesFrameset.Fork", b =>
                {
                    b.Property<int>("ForkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForkId"));

                    b.Property<string>("ForkDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ForkName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("ForkQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("ForkId");

                    b.ToTable("Fork", "sparesFrameset");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesFrameset.Frame", b =>
                {
                    b.Property<int>("FrameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrameId"));

                    b.Property<string>("FrameDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FrameName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("FrameQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("FrameId");

                    b.ToTable("Frame", "sparesFrameset");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesGroopset.Carriage", b =>
                {
                    b.Property<int>("CarriageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarriageId"));

                    b.Property<string>("CarriageName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("CarriageQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("CarriageId");

                    b.ToTable("Carriage", "sparesGroopset");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesGroopset.Pedals", b =>
                {
                    b.Property<int>("PedalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PedalsId"));

                    b.Property<string>("PedalsName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("PedalsQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("PedalsId");

                    b.ToTable("Pedals", "sparesGroopset");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesGroopset.Transmition", b =>
                {
                    b.Property<int>("TransmitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransmitionId"));

                    b.Property<int>("CassetteId")
                        .HasColumnType("int");

                    b.Property<int>("FrontGearId")
                        .HasColumnType("int");

                    b.Property<int>("ShifterId")
                        .HasColumnType("int");

                    b.Property<int>("SwitchId")
                        .HasColumnType("int");

                    b.HasKey("TransmitionId");

                    b.HasIndex("CassetteId");

                    b.HasIndex("FrontGearId");

                    b.HasIndex("ShifterId");

                    b.HasIndex("SwitchId");

                    b.ToTable("Transmition", "sparesGroopset");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesTransmition.Cassette", b =>
                {
                    b.Property<int>("CassetteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CassetteId"));

                    b.Property<string>("CassetteName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("CassetteQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("CassetteId");

                    b.ToTable("Cassette", "sparesTransmition");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesTransmition.FrontGear", b =>
                {
                    b.Property<int>("FrontGearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrontGearId"));

                    b.Property<string>("FrontGearName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("FrontGearQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("FrontGearId");

                    b.ToTable("FrontGear", "sparesTransmition");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesTransmition.Shifter", b =>
                {
                    b.Property<int>("ShifterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShifterId"));

                    b.Property<string>("ShifterName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ShifterQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("ShifterId");

                    b.ToTable("Shifter", "sparesTransmition");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesTransmition.Switch", b =>
                {
                    b.Property<int>("SwitchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SwitchId"));

                    b.Property<string>("SwitchName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("SwitchQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("SwitchId");

                    b.ToTable("Switch", "sparesTransmition");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesWheelset.Hub", b =>
                {
                    b.Property<int>("HubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HubId"));

                    b.Property<string>("HubDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HubName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("HubQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("HubId");

                    b.ToTable("Hub", "sparesWheelset");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesWheelset.Rim", b =>
                {
                    b.Property<int>("RimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RimId"));

                    b.Property<string>("RimDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RimName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("RimQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("RimId");

                    b.ToTable("Rim", "sparesWheelset");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesWheelset.Tire", b =>
                {
                    b.Property<int>("TireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TireId"));

                    b.Property<string>("TireDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TireName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("TireQuantity")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("TireId");

                    b.ToTable("Tire", "sparesWheelset");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.factory.Staff", b =>
                {
                    b.HasOne("TREK_Web_Diploma.Models.factory.Factory", "Factory")
                        .WithMany()
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.factory.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.production.Bike", b =>
                {
                    b.HasOne("TREK_Web_Diploma.Models.production.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.production.Frameset", "Frameset")
                        .WithMany()
                        .HasForeignKey("FramesetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.production.Groopset", "Groopset")
                        .WithMany()
                        .HasForeignKey("GroopsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.production.Wheelset", "Wheelset")
                        .WithMany()
                        .HasForeignKey("WheelsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Frameset");

                    b.Navigation("Groopset");

                    b.Navigation("Wheelset");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.production.Equipment", b =>
                {
                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesEquipment.Brake", "Brake")
                        .WithMany()
                        .HasForeignKey("BrakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesEquipment.Grips", "Grips")
                        .WithMany()
                        .HasForeignKey("GripsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesEquipment.Handlebar", "Handlebar")
                        .WithMany()
                        .HasForeignKey("HandlebarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesEquipment.Saddle", "Saddle")
                        .WithMany()
                        .HasForeignKey("SaddleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesEquipment.SeatPost", "SeatPost")
                        .WithMany()
                        .HasForeignKey("SeatPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesEquipment.Steering", "Steering")
                        .WithMany()
                        .HasForeignKey("SteeringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesEquipment.Stem", "Stem")
                        .WithMany()
                        .HasForeignKey("StemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brake");

                    b.Navigation("Grips");

                    b.Navigation("Handlebar");

                    b.Navigation("Saddle");

                    b.Navigation("SeatPost");

                    b.Navigation("Steering");

                    b.Navigation("Stem");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.production.Frameset", b =>
                {
                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesFrameset.Fork", "Fork")
                        .WithMany()
                        .HasForeignKey("ForkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesFrameset.Frame", "Frame")
                        .WithMany()
                        .HasForeignKey("FrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fork");

                    b.Navigation("Frame");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.production.Groopset", b =>
                {
                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesGroopset.Carriage", "Carriage")
                        .WithMany()
                        .HasForeignKey("CarriageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesGroopset.Pedals", "Pedals")
                        .WithMany()
                        .HasForeignKey("PedalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesGroopset.Transmition", "Transmition")
                        .WithMany()
                        .HasForeignKey("TransmitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carriage");

                    b.Navigation("Pedals");

                    b.Navigation("Transmition");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.production.Wheelset", b =>
                {
                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesWheelset.Hub", "Hub")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesWheelset.Rim", "Rim")
                        .WithMany()
                        .HasForeignKey("RimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesWheelset.Tire", "Tire")
                        .WithMany()
                        .HasForeignKey("TireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hub");

                    b.Navigation("Rim");

                    b.Navigation("Tire");
                });

            modelBuilder.Entity("TREK_Web_Diploma.Models.spares.sparesGroopset.Transmition", b =>
                {
                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesTransmition.Cassette", "Cassette")
                        .WithMany()
                        .HasForeignKey("CassetteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesTransmition.FrontGear", "FrontGear")
                        .WithMany()
                        .HasForeignKey("FrontGearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesTransmition.Shifter", "Shifter")
                        .WithMany()
                        .HasForeignKey("ShifterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TREK_Web_Diploma.Models.spares.sparesTransmition.Switch", "Switch")
                        .WithMany()
                        .HasForeignKey("SwitchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cassette");

                    b.Navigation("FrontGear");

                    b.Navigation("Shifter");

                    b.Navigation("Switch");
                });
#pragma warning restore 612, 618
        }
    }
}
